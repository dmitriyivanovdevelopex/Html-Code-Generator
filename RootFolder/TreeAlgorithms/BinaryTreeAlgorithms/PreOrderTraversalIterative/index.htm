<html>
<head>
<meta http-equiv="content-type" content="text/html; charset=UTF-8">
<meta charset="utf-8">
<title>Pre-Order Traversal Iterative</title>
<meta name="viewport" content="width=device-width, initial-scale=1.0">
<meta name="description" content="Web-site dedicated to study of Algorithms and Data Structures. All Examples are in C#.">
<meta name="author" content="Petro Kolosov">
<meta name="keywords" content="Data structures, Algorithms">
<meta name="revisit-after" content="3 days">
<meta name="twitter:card" content="@Algorithms and Data Structures in C#" />
<meta name="twitter:site" content="https://kolosovpetro.github.io/Html-Code-Generator/RootFolder" />
<meta name="twitter:title" content="Algorithms and Data Structures in C#" />
<meta name="twitter:description" content="Web-site dedicated to study of Algorithms and Data Structures. All Examples are in C#." />
<meta name="twitter:image" content="https://kolosovpetro.github.io/Html-Code-Generator/RootFolder/css/card_image.jpg" />
<link rel="icon" type="image/png" href="https://kolosovpetro.github.io/Html-Code-Generator/RootFolder/css/favicon-16x16.png" sizes="16x16" />
<link rel="stylesheet" type="text/css" media="screen" href="https://kolosovpetro.github.io/Html-Code-Generator/RootFolder/css/compScience.css">
<link rel="stylesheet" href="https://kolosovpetro.github.io/Html-Code-Generator/RootFolder/css/darcula.css">
<script src="https://kolosovpetro.github.io/Html-Code-Generator/RootFolder/css/highlight.pack.js"></script>
<script>hljs.initHighlightingOnLoad();</script>
</head>
<body class="compScience">
<h1>Algorithms and Data Structures in C#</h1>
<h2>Pre-Order Traversal Iterative</h2>
<h3>Description</h3> Process node N, then process Left subtree, then process Right subtree.
<ul>
<li><a href="https://github.com/kolosovpetro/Html-Code-Generator">Source</a></li>
<li><a href="../">Back</a></li>
</ul>
<h3>Code snippet</h3>
<div class="common">
<pre><code class="csharp">
public IEnumerable&lt;IBinarySearchTree&gt; PreOrderTraversalIterative(IBinarySearchTree tree)
{
    var stack = new Stack&lt;IBinarySearchTree&gt;();
    stack.Push(tree);

    while (stack.Count &gt; 0)
    {
        var currentNode = stack.Pop();
        yield return currentNode;

        if (currentNode.HasRight)
            stack.Push(currentNode.Right);

        if (currentNode.HasLeft)
            stack.Push(currentNode.Left);
    }
}
</code></pre>
</div>
</body>
</html>
