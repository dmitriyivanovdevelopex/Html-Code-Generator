<html>
<head>
<meta http-equiv="content-type" content="text/html; charset=UTF-8">
<meta charset="utf-8">
<title>Depth-First Graph Traversal Iterative</title>
<meta name="viewport" content="width=device-width, initial-scale=1.0">
<meta name="description" content="Algorithms and Data Structures in C#">
<meta name="author" content="Petro Kolosov">
<meta name="keywords" content="Data structures, Algorithms">
<meta name="revisit-after" content="3 days">
<link rel="icon" type="image/png" href="https://kolosovpetro.github.io/Html-Code-Generator/RootFolder/css/favicon-16x16.png" sizes="16x16" />
<link rel="stylesheet" type="text/css" media="screen" href="https://kolosovpetro.github.io/Html-Code-Generator/RootFolder/css/compScience.css">
<link rel="stylesheet" href="https://kolosovpetro.github.io/Html-Code-Generator/RootFolder/css/darcula.css">
<script src="https://kolosovpetro.github.io/Html-Code-Generator/RootFolder/css/highlight.pack.js"></script>
<script>hljs.initHighlightingOnLoad();</script>
</head>
<body class="compScience">
<h1>Algorithms and Data Structures in C#</h1>
<h2>Depth-First Graph Traversal Iterative</h2>
<h3>Description</h3> Recursively traversals all graph nodes.
<ul>
<li><a href="https://github.com/kolosovpetro/Html-Code-Generator">Source</a></li>
<li><a href="../">Back</a></li>
</ul>
<h3>Code snippet</h3>
<div class="common">
<pre><code class="csharp">
public static IEnumerable&lt;IVertex&lt;T&gt;&gt; DepthFirstIterative(IGraph&lt;T&gt; graph, IVertex&lt;T&gt; startVertex,
    IVertex&lt;T&gt; searchVertex)
{
    if (!graph.ContainsVertex(startVertex) || !graph.ContainsVertex(searchVertex))
        throw new InvalidOperationException("One or more vertices are not belong to graph.");

    var stack = new Stack&lt;IVertex&lt;T&gt;&gt;();

    stack.Push(startVertex);

    while (stack.Any())
    {
        var vertex = stack.Pop();
        vertex.Visit();
        yield return vertex;
        if (vertex.Equals(searchVertex))
            yield break;
        var unvisitedVertices = vertex.AdjacentUnvisitedVertices();
        foreach (var v in unvisitedVertices)
            stack.Push(v);
    }
}
</code></pre>
</div>
</body>
</html>
