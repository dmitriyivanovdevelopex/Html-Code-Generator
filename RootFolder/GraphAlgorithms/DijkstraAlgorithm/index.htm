<html>
<head>
<meta http-equiv="content-type" content="text/html; charset=UTF-8">
<meta charset="utf-8">
<title>Dijkstra Algorithm</title>
<meta name="viewport" content="width=device-width, initial-scale=1.0">
<meta name="description" content="Web-site dedicated to study of Algorithms and Data Structures. All Examples are in C#.">
<meta name="author" content="Petro Kolosov">
<meta name="keywords" content="Data structures, Algorithms">
<meta name="revisit-after" content="3 days">
<meta name="twitter:site" content="https://kolosovpetro.github.io/Html-Code-Generator/RootFolder" />
<meta name="twitter:title" content="Algorithms and Data Structures in C#" />
<meta name="twitter:description" content="Web-site dedicated to study of Algorithms and Data Structures. All Examples are in C#." />
<meta name="twitter:image" content="https://kolosovpetro.github.io/Html-Code-Generator/RootFolder/css/card_image.jpg" />
<link rel="icon" type="image/png" href="https://kolosovpetro.github.io/Html-Code-Generator/RootFolder/css/favicon-16x16.png" sizes="16x16" />
<link rel="stylesheet" type="text/css" media="screen" href="https://kolosovpetro.github.io/Html-Code-Generator/RootFolder/css/compScience.css">
<link rel="stylesheet" href="https://kolosovpetro.github.io/Html-Code-Generator/RootFolder/css/darcula.css">
<script src="https://kolosovpetro.github.io/Html-Code-Generator/RootFolder/css/highlight.pack.js"></script>
<script>hljs.initHighlightingOnLoad();</script>
</head>
<body class="compScience">
<h1>Algorithms and Data Structures in C#</h1>
<h2>Dijkstra Algorithm</h2>
<h3>Description</h3> Single shortest patch algorithm finder.
<ul>
<li><a href="https://github.com/kolosovpetro/Html-Code-Generator">Source</a></li>
<li><a href="../">Back</a></li>
</ul>
<h3>Code snippet</h3>
<div class="common">
<pre><code class="csharp">
public static List&lt;DistanceModel&lt;T&gt;&gt; DijkstraMethod(IGraph&lt;T&gt; graph, IVertex&lt;T&gt; start)
{
    if (!graph.ContainsVertex(start))
        throw new InvalidOperationException("Vertex does not belong to graph");

    var list = new List&lt;DistanceModel&lt;T&gt;&gt; {new DistanceModel&lt;T&gt;(start, start, 0)};
    var currentVertex = start;
    var iterator = 0;

    while (graph.UnvisitedVertices().Any())
    {
        currentVertex.Visit();

        var edgesToAdjacentUnvisitedVertices = graph
                .EdgesToAdjacentUnvisitedVertices(currentVertex);

        foreach (var edge in edgesToAdjacentUnvisitedVertices)
        {
            if (ContainsAndGreater(list, edge.EndVertex, iterator + edge.Weight))
            {
                var distance = GetDistanceModelByEndVertex(list, edge.EndVertex);
                distance.Distance = iterator + edge.Weight;
                distance.PreviousVertex = currentVertex;
                continue;
            }

            if (!Contains(list, edge.EndVertex))
                list.Add(new DistanceModel&lt;T&gt;
                {
                    Vertex = edge.EndVertex,
                    PreviousVertex = currentVertex,
                    Distance = iterator + edge.Weight,
                });
        }

        if (!edgesToAdjacentUnvisitedVertices.Any()) break;

        var minEdge = GetMinEdge(edgesToAdjacentUnvisitedVertices);
        iterator += minEdge.Weight;
        currentVertex = minEdge.EndVertex;
    }

    return list;
}
</code></pre>
</div>
</body>
</html>
