<html>
<head>
<meta http-equiv="content-type" content="text/html; charset=UTF-8">
<meta charset="utf-8">
<title>Quick Sort</title>
<meta name="viewport" content="width=device-width, initial-scale=1.0">
<meta name="description" content="Web-site dedicated to study of Algorithms and Data Structures. All Examples are in C#.">
<meta name="author" content="Petro Kolosov">
<meta name="keywords" content="Data structures, Algorithms">
<meta name="revisit-after" content="3 days">
<html prefix="og: http://ogp.me/ns#">
<meta name="twitter:card" content="summary" />
<meta name="twitter:site" content="https://kolosovpetro.github.io/Html-Code-Generator/RootFolder" />
<meta name="twitter:title" content="Algorithms and Data Structures in C#" />
<meta name="twitter:description" content="Web-site dedicated to study of Algorithms and Data Structures. All Examples are in C#." />
<meta name="twitter:image" content="https://kolosovpetro.github.io/Html-Code-Generator/RootFolder/css/card_image.jpg" />
<link rel="icon" type="image/png" href="https://kolosovpetro.github.io/Html-Code-Generator/RootFolder/css/favicon-16x16.png" sizes="16x16" />
<link rel="stylesheet" type="text/css" media="screen" href="https://kolosovpetro.github.io/Html-Code-Generator/RootFolder/css/compScience.css">
<link rel="stylesheet" href="https://kolosovpetro.github.io/Html-Code-Generator/RootFolder/css/darcula.css">
<script src="https://kolosovpetro.github.io/Html-Code-Generator/RootFolder/css/highlight.pack.js"></script>
<script>hljs.initHighlightingOnLoad();</script>
</head>
<body class="compScience">
<h1>Algorithms and Data Structures in C#</h1>
<h2>Quick Sort</h2>
<h3>Description</h3> Advanced Sort Algorithm. Sorts sequence of integers.
<ul>
<li><a href="https://github.com/kolosovpetro/Html-Code-Generator">Source</a></li>
<li><a href="../">Back</a></li>
</ul>
<h3>Code snippet</h3>
<div class="common">
<pre><code class="csharp">
public class QuickSort : ISortAlgorithm
{
    public void SortSequence(int[] sequence) => QuickSortExecute(sequence, 0, sequence.Length - 1);

    private static void QuickSortExecute(int[] array, int left, int right)
    {
        if (left >= right) return;
        var pivot = Partition(array, left, right);
        QuickSortExecute(array, left, pivot - 1);
        QuickSortExecute(array, pivot + 1, right);
    }

    private static int Partition(int[] array, int left, int right)
    {
        var pivot = array[right];
        var end = left;

        for (var i = left; i < right; i++)
        {
            if (array[i] < pivot)
            {
                ISortAlgorithm.Swap(array, i, end);
                end++;
            }
        }

        ISortAlgorithm.Swap(array, end, right);
        return end;
    }
}
</code></pre>
</div>
</body>
</html>
