<html>
<head>
<meta http-equiv="content-type" content="text/html; charset=UTF-8">
<meta charset="utf-8">
<title>Merge Sort</title>
<meta name="viewport" content="width=device-width, initial-scale=1.0">
<meta name="description" content="Algorithms and Data Structures in C#">
<meta name="author" content="Petro Kolosov">
<meta name="keywords" content="Data structures, Algorithms">
<meta name="revisit-after" content="3 days">
<link rel="icon" type="image/png" href="https://kolosovpetro.github.io/Html-Code-Generator/RootFolder/css/favicon-16x16.png" sizes="16x16" />
<link rel="stylesheet" type="text/css" media="screen" href="https://kolosovpetro.github.io/Html-Code-Generator/RootFolder/css/compScience.css">
<link rel="stylesheet" href="https://kolosovpetro.github.io/Html-Code-Generator/RootFolder/code_highlight_css/styles/darcula.css">
<script src="https://kolosovpetro.github.io/Html-Code-Generator/RootFolder/code_highlight_css/highlight.pack.js"></script>
<script>hljs.initHighlightingOnLoad();</script>
</head>
<body class="compScience">
<h1>Algorithms and Data Structures in C#</h1>
<h2>Merge Sort</h2>
<ul>
<li><a href="../">Back</li>
</ul>
<h3>Code snippet</h3>
<div class="common">
<pre><code class="csharp">
public class MergeSort : ISortAlgorithm
{
    public void SortSequence(int[] sequence) => MergeSortExecute(sequence, 0, sequence.Length - 1);

    private static void MergeSortExecute(int[] arr, int startIndex, int endIndex)
    {
        if (startIndex >= endIndex) return;
        var middleIndex = startIndex + (endIndex - startIndex) / 2;
        MergeSortExecute(arr, startIndex, middleIndex);
        MergeSortExecute(arr, middleIndex + 1, endIndex);
        Merge(arr, startIndex, middleIndex, endIndex);
    }

    private static void Merge(int[] array, int left, int middle, int right)
    {
        var leftSubarraySize = middle - left + 1;
        var rightSubarraySize = right - middle;

        var leftSubarray = new int[leftSubarraySize];
        var rightSubarray = new int[rightSubarraySize];

        Array.Copy(array, left, leftSubarray, 0, leftSubarraySize);
        Array.Copy(array, middle + 1, rightSubarray, 0, rightSubarraySize);

        int i = 0, j = 0, k = left;

        while (i < leftSubarraySize && j < rightSubarraySize)
        {
            if (leftSubarray[i] <= rightSubarray[j])
            {
                array[k] = leftSubarray[i];
                i++;
            }
            else
            {
                array[k] = rightSubarray[j];
                j++;
            }

            k++;
        }

        // Copy the remaining elements of L[], if there are any
        while (i < leftSubarraySize)
        {
            array[k] = leftSubarray[i];
            i++;
            k++;
        }

        // Copy the remaining elements of R[], if there are any
        while (j < rightSubarraySize)
        {
            array[k] = rightSubarray[j];
            j++;
            k++;
        }
    }
}
</code></pre>
</div>
</body>
</html>
