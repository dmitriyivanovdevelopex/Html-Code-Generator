<html>
<head>
<meta http-equiv="content-type" content="text/html; charset=UTF-8">
<meta charset="utf-8">
<title>Shunting-Yard Algorithhm</title>
<meta name="viewport" content="width=device-width, initial-scale=1.0">
<meta name="description" content="Algorithms and Data Structures in C#">
<meta name="author" content="Petro Kolosov">
<meta name="keywords" content="Data structures, Algorithms">
<meta name="revisit-after" content="3 days">
<link rel="icon" type="image/png" href="https://kolosovpetro.github.io/Html-Code-Generator/RootFolder/css/favicon-16x16.png" sizes="16x16" />
<link rel="stylesheet" type="text/css" media="screen" href="https://kolosovpetro.github.io/Html-Code-Generator/RootFolder/css/compScience.css">
<link rel="stylesheet" href="https://kolosovpetro.github.io/Html-Code-Generator/RootFolder/css/darcula.css">
<script src="https://kolosovpetro.github.io/Html-Code-Generator/RootFolder/css/highlight.pack.js"></script>
<script>hljs.initHighlightingOnLoad();</script>
</head>
<body class="compScience">
<h1>Algorithms and Data Structures in C#</h1>
<h2>Shunting-Yard Algorithhm</h2>
<h3>Description</h3> Converts infix expression to postfix. Input: n-size infix string.
<ul>
<li><a href="https://github.com/kolosovpetro/Html-Code-Generator">Source</a></li>
<li><a href="../">Back</a></li>
</ul>
<h3>Code snippet</h3>
<div class="common">
<pre><code class="csharp">
public static Queue&lt;char&gt; ShuntingYard(string input)
{
    var outputQueue = new Queue&lt;char&gt;();
    var operandStack = new Stack&lt;char&gt;();

    foreach (var token in input)
    {
        if (int.TryParse(token.ToString(), out _))
        {
            outputQueue.Enqueue(token);
            continue;
        }
                
        switch (token)
        {
            case '(':
                    operandStack.Push(token);
                    continue;
            case ')':
                {
                    while (operandStack.Peek() != '(') 
                        outputQueue.Enqueue(operandStack.Pop());

                    operandStack.Pop();
                    continue;
                }
        }

        while (operandStack.Any()
            && Precedence(operandStack.Peek()) &gt;= Precedence(token)
            && Associativity(token) == "Left") 
                outputQueue.Enqueue(operandStack.Pop());

        operandStack.Push(token);
    }

    while (operandStack.Any()) outputQueue.Enqueue(operandStack.Pop());
    return outputQueue;
}
</code></pre>
</div>
</body>
</html>
